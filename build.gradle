plugins {
	id 'org.jetbrains.kotlin.jvm' version '1.9.25'
	id 'org.jetbrains.kotlin.plugin.spring' version '1.9.25'
	id 'org.jetbrains.kotlin.plugin.jpa' version '1.9.25'
	id 'org.jetbrains.kotlin.plugin.serialization' version '1.9.25'
	id 'org.springframework.boot' version '3.5.3'
	id 'io.spring.dependency-management' version '1.1.7'
	id 'jacoco'
}

group = 'org.chargepoint.kotlin'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(17)
	}
}

repositories {
	mavenCentral()
}

dependencies {
	// Core Spring Boot
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-validation'

	// Kotlin essentials
	implementation 'org.jetbrains.kotlin:kotlin-reflect'
	implementation 'com.fasterxml.jackson.module:jackson-module-kotlin'

	// Optional: Kotlin serialization (alternative to Jackson for APIs/configs)
	implementation 'org.jetbrains.kotlinx:kotlinx-serialization-json:1.6.0'

	// Optional: Modern logging
	implementation 'io.github.microutils:kotlin-logging-jvm:3.0.5'

	// Optional: Coroutines support (if you plan async operations)
	implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core:1.7.3'
	implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-reactor:1.7.3'

	//Add kotlin date time controls
	implementation 'org.jetbrains.kotlinx:kotlinx-datetime:0.4.1'
	
	//Add external API Calling
	implementation("org.springframework.boot:spring-boot-starter-webflux")


	implementation("org.springframework.kafka:spring-kafka")
	implementation("org.springframework.boot:spring-boot-configuration-processor")
	annotationProcessor("org.springframework.boot:spring-boot-configuration-processor")


	// Database
	runtimeOnly 'com.h2database:h2'
	// Consider switching to a real database for new projects:
	// runtimeOnly 'org.postgresql:postgresql'

	// Testing
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.jetbrains.kotlin:kotlin-test-junit5'
	testImplementation 'io.mockk:mockk:1.13.8'
	testImplementation 'com.ninja-squad:springmockk:4.0.2'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

kotlin {
	compilerOptions {
		freeCompilerArgs.addAll '-Xjsr305=strict'
	}
}

// Essential for JPA entities in Kotlin
allOpen {
	annotation 'jakarta.persistence.Entity'
	annotation 'jakarta.persistence.MappedSuperclass'
	annotation 'jakarta.persistence.Embeddable'
}

// Generates no-arg constructors for JPA
noArg {
	annotation 'jakarta.persistence.Entity'
	annotation 'jakarta.persistence.MappedSuperclass'
	annotation 'jakarta.persistence.Embeddable'
}

tasks.named('test') {
	useJUnitPlatform()
}

jacoco {
	toolVersion = '0.8.10'
}

jacocoTestReport {
	dependsOn test
	reports {
		xml.required.set(true)
		html.required.set(true)
		csv.required.set(false)
	}
	// Optional: exclude boilerplate packages like DTOs
	classDirectories.setFrom(
			files(classDirectories.files.collect {
				fileTree(dir: it, exclude: [
						'**/dto/**',
						'**/config/**',
						'**/exception/**'
				])
			})
	)
}